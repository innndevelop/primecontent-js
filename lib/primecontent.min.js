!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("primecontent",[],e):"object"==typeof exports?exports.primecontent=e():t.primecontent=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){t.exports=n(12)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r,o=(r=n(9))&&r.__esModule?r:{default:r};function u(t){return(u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function i(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t,e){return!e||"object"!==u(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var s=function(t){function e(t){var n;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(n=c(this,a(e).call(this)))._config=t,n}var n,r,u;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(e,o.default),n=e,(r=[{key:"currentSpace",get:function(){return this._config.space}}])&&i(n.prototype,r),u&&i(n,u),e}();e.default=s,t.exports=e.default},function(t,e,n){"use strict";var r=n(4),o=n(13),u=Object.prototype.toString;function i(t){return"[object Array]"===u.call(t)}function c(t){return null!==t&&"object"==typeof t}function a(t){return"[object Function]"===u.call(t)}function f(t,e){if(null!=t)if("object"!=typeof t&&(t=[t]),i(t))for(var n=0,r=t.length;n<r;n++)e.call(null,t[n],n,t);else for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&e.call(null,t[o],o,t)}t.exports={isArray:i,isArrayBuffer:function(t){return"[object ArrayBuffer]"===u.call(t)},isBuffer:o,isFormData:function(t){return"undefined"!=typeof FormData&&t instanceof FormData},isArrayBufferView:function(t){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&t.buffer instanceof ArrayBuffer},isString:function(t){return"string"==typeof t},isNumber:function(t){return"number"==typeof t},isObject:c,isUndefined:function(t){return void 0===t},isDate:function(t){return"[object Date]"===u.call(t)},isFile:function(t){return"[object File]"===u.call(t)},isBlob:function(t){return"[object Blob]"===u.call(t)},isFunction:a,isStream:function(t){return c(t)&&a(t.pipe)},isURLSearchParams:function(t){return"undefined"!=typeof URLSearchParams&&t instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:f,merge:function t(){var e={};function n(n,r){"object"==typeof e[r]&&"object"==typeof n?e[r]=t(e[r],n):e[r]=n}for(var r=0,o=arguments.length;r<o;r++)f(arguments[r],n);return e},extend:function(t,e,n){return f(e,function(e,o){t[o]=n&&"function"==typeof e?r(e,n):e}),t},trim:function(t){return t.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(t,e,n){"use strict";(function(e){var r=n(2),o=n(16),u={"Content-Type":"application/x-www-form-urlencoded"};function i(t,e){!r.isUndefined(t)&&r.isUndefined(t["Content-Type"])&&(t["Content-Type"]=e)}var c,a={adapter:("undefined"!=typeof XMLHttpRequest?c=n(5):void 0!==e&&(c=n(5)),c),transformRequest:[function(t,e){return o(e,"Content-Type"),r.isFormData(t)||r.isArrayBuffer(t)||r.isBuffer(t)||r.isStream(t)||r.isFile(t)||r.isBlob(t)?t:r.isArrayBufferView(t)?t.buffer:r.isURLSearchParams(t)?(i(e,"application/x-www-form-urlencoded;charset=utf-8"),t.toString()):r.isObject(t)?(i(e,"application/json;charset=utf-8"),JSON.stringify(t)):t}],transformResponse:[function(t){if("string"==typeof t)try{t=JSON.parse(t)}catch(t){}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(t){return t>=200&&t<300}};a.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(t){a.headers[t]={}}),r.forEach(["post","put","patch"],function(t){a.headers[t]=r.merge(u)}),t.exports=a}).call(this,n(15))},function(t,e,n){"use strict";t.exports=function(t,e){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return t.apply(e,n)}}},function(t,e,n){"use strict";var r=n(2),o=n(17),u=n(19),i=n(20),c=n(21),a=n(6),f="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(22);t.exports=function(t){return new Promise(function(e,s){var l=t.data,p=t.headers;r.isFormData(l)&&delete p["Content-Type"];var y=new XMLHttpRequest,d="onreadystatechange",h=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in y||c(t.url)||(y=new window.XDomainRequest,d="onload",h=!0,y.onprogress=function(){},y.ontimeout=function(){}),t.auth){var b=t.auth.username||"",v=t.auth.password||"";p.Authorization="Basic "+f(b+":"+v)}if(y.open(t.method.toUpperCase(),u(t.url,t.params,t.paramsSerializer),!0),y.timeout=t.timeout,y[d]=function(){if(y&&(4===y.readyState||h)&&(0!==y.status||y.responseURL&&0===y.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in y?i(y.getAllResponseHeaders()):null,r={data:t.responseType&&"text"!==t.responseType?y.response:y.responseText,status:1223===y.status?204:y.status,statusText:1223===y.status?"No Content":y.statusText,headers:n,config:t,request:y};o(e,s,r),y=null}},y.onerror=function(){s(a("Network Error",t,null,y)),y=null},y.ontimeout=function(){s(a("timeout of "+t.timeout+"ms exceeded",t,"ECONNABORTED",y)),y=null},r.isStandardBrowserEnv()){var m=n(23),g=(t.withCredentials||c(t.url))&&t.xsrfCookieName?m.read(t.xsrfCookieName):void 0;g&&(p[t.xsrfHeaderName]=g)}if("setRequestHeader"in y&&r.forEach(p,function(t,e){void 0===l&&"content-type"===e.toLowerCase()?delete p[e]:y.setRequestHeader(e,t)}),t.withCredentials&&(y.withCredentials=!0),t.responseType)try{y.responseType=t.responseType}catch(e){if("json"!==t.responseType)throw e}"function"==typeof t.onDownloadProgress&&y.addEventListener("progress",t.onDownloadProgress),"function"==typeof t.onUploadProgress&&y.upload&&y.upload.addEventListener("progress",t.onUploadProgress),t.cancelToken&&t.cancelToken.promise.then(function(t){y&&(y.abort(),s(t),y=null)}),void 0===l&&(l=null),y.send(l)})}},function(t,e,n){"use strict";var r=n(18);t.exports=function(t,e,n,o,u){var i=new Error(t);return r(i,e,n,o,u)}},function(t,e,n){"use strict";t.exports=function(t){return!(!t||!t.__CANCEL__)}},function(t,e,n){"use strict";function r(t){this.message=t}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,t.exports=r},function(t,e,n){"use strict";var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var o={emitDelay:10,strictMode:!1},u=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?o:arguments[0];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var n=void 0,r=void 0;n=e.hasOwnProperty("emitDelay")?e.emitDelay:o.emitDelay,this._emitDelay=n,r=e.hasOwnProperty("strictMode")?e.strictMode:o.strictMode,this._strictMode=r,this._listeners={},this.events=[]}return r(t,[{key:"_addListenner",value:function(t,e,n){if("function"!=typeof e)throw TypeError("listener must be a function");-1===this.events.indexOf(t)?(this._listeners[t]=[{once:n,fn:e}],this.events.push(t)):this._listeners[t].push({once:n,fn:e})}},{key:"on",value:function(t,e){this._addListenner(t,e,!1)}},{key:"once",value:function(t,e){this._addListenner(t,e,!0)}},{key:"off",value:function(t,e){var n,r,o=this,u=this.events.indexOf(t);t&&-1!==u&&(e?(n=[],(r=o._listeners[t]).forEach(function(t,r){t.fn===e&&n.unshift(r)}),n.forEach(function(t){r.splice(t,1)}),r.length||(o.events.splice(u,1),delete o._listeners[t])):(delete this._listeners[t],this.events.splice(u,1)))}},{key:"_applyEvents",value:function(t,e){var n=this._listeners[t];if(n&&n.length){var r=[];n.forEach(function(t,n){t.fn.apply(null,e),t.once&&r.unshift(n)}),r.forEach(function(t){n.splice(t,1)})}else if(this._strictMode)throw"No listeners specified for event: "+t}},{key:"emit",value:function(t){for(var e=this,n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];this._emitDelay?setTimeout(function(){e._applyEvents.call(e,t,r)},this._emitDelay):this._applyEvents(t,r)}},{key:"emitSync",value:function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];this._applyEvents(t,n)}},{key:"destroy",value:function(){this._listeners={},this.events=[]}}]),t}();t.exports=u},function(t,e,n){"use strict";var r;Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var o=((r=n(11))&&r.__esModule?r:{default:r}).default;e.default=o,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=w(n(0)),o=w(n(31)),u=w(n(32)),i=w(n(33)),c=w(n(34)),a=w(n(35)),f=w(n(36)),s=w(n(37)),l=w(n(38)),p=w(n(39)),y=w(n(40)),d=w(n(41)),h=w(n(42)),b=w(n(43)),v=w(n(44)),m=w(n(45)),g=w(n(9));function w(t){return t&&t.__esModule?t:{default:t}}function O(t){return(O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function P(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function j(t,e){return!e||"object"!==O(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function S(t){return(S=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function k(t,e){return(k=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var E="https://core.primecontent.io",x=function(t){function e(){var t;return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),(t=j(this,S(e).call(this)))._config={mode:"jwt",token:"",refresh_token:"",space:""},r.default.defaults.baseURL=E,t._initialized=!1,t}var n,w,O;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&k(t,e)}(e,g.default),n=e,(w=[{key:"init",value:function(t){var e=this;return this.MAX_RETRIES=3,this.retry=0,this._config=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){_(t,e,n[e])})}return t}({},this._config,t),this._initialized=!0,this._asset=new h.default(t),this._entry=new o.default(t),this._entryType=new u.default(t),this._user=new b.default(t),this._token=new v.default(t),this._group=new m.default(t),this._organization=new a.default(t),this._space=new c.default(t),this._compound=new f.default(t),this._form=new s.default(t),this._formType=new l.default(t),this._hook=new p.default(t),this._tag=new d.default(t),this._defaultConfig=new y.default(t),"jwt"===this._config.mode?r.default.defaults.headers.common.Authorization="Bearer ".concat(t.token):r.default.defaults.baseURL="https://cdn.primecontent.io",r.default.interceptors.request.use(function(t){return"access_token"===e._config.mode&&(t.params?t.params.access_token=e._config.token:t.params={access_token:e._config.token}),e.emit("api.request",t),t},function(t){return e.emit("api.error"),Promise.reject(t)}),r.default.interceptors.response.use(function(t){return e.emit("api.response",t),t},function(t){return"jwt"===e._config.mode&&401===t.response.status&&e._config.refresh_token&&e.retry<=e.MAX_RETRIES?(e.retry++,e.auth.refresh(e._config.refresh_token).then(function(n){return e._config.token=n.token,t.config.headers={Authorization:"Bearer "+n.token},r.default.defaults.headers.common.Authorization="Bearer ".concat(n.token),e.emit("api.change.token",n.token),e.retry=0,r.default.request(t.config)})):(e.emit("api.error",t),Promise.reject(t))}),!0}},{key:"setCurrentSpace",value:function(t){this._config.space=t}},{key:"getCurrentSpace",value:function(){return this._config.space}},{key:"auth",get:function(){return new i.default}},{key:"assets",get:function(){return this._asset}},{key:"users",get:function(){return this._user}},{key:"organizations",get:function(){return this._organization}},{key:"spaces",get:function(){return this._space}},{key:"entries",get:function(){return this._entry}},{key:"entryTypes",get:function(){return this._entryType}},{key:"forms",get:function(){return this._form}},{key:"formTypes",get:function(){return this._formType}},{key:"compounds",get:function(){return this._compound}},{key:"hooks",get:function(){return this._hook}},{key:"configs",get:function(){return this._defaultConfig}},{key:"tags",get:function(){return this._tag}},{key:"groups",get:function(){return this._group}},{key:"tokens",get:function(){return this._token}}])&&P(n.prototype,w),O&&P(n,O),e}();e.default=x,t.exports=e.default},function(t,e,n){"use strict";var r=n(2),o=n(4),u=n(14),i=n(3);function c(t){var e=new u(t),n=o(u.prototype.request,e);return r.extend(n,u.prototype,e),r.extend(n,e),n}var a=c(i);a.Axios=u,a.create=function(t){return c(r.merge(i,t))},a.Cancel=n(8),a.CancelToken=n(29),a.isCancel=n(7),a.all=function(t){return Promise.all(t)},a.spread=n(30),t.exports=a,t.exports.default=a},function(t,e){function n(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
t.exports=function(t){return null!=t&&(n(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&n(t.slice(0,0))}(t)||!!t._isBuffer)}},function(t,e,n){"use strict";var r=n(3),o=n(2),u=n(24),i=n(25);function c(t){this.defaults=t,this.interceptors={request:new u,response:new u}}c.prototype.request=function(t){"string"==typeof t&&(t=o.merge({url:arguments[0]},arguments[1])),(t=o.merge(r,{method:"get"},this.defaults,t)).method=t.method.toLowerCase();var e=[i,void 0],n=Promise.resolve(t);for(this.interceptors.request.forEach(function(t){e.unshift(t.fulfilled,t.rejected)}),this.interceptors.response.forEach(function(t){e.push(t.fulfilled,t.rejected)});e.length;)n=n.then(e.shift(),e.shift());return n},o.forEach(["delete","get","head","options"],function(t){c.prototype[t]=function(e,n){return this.request(o.merge(n||{},{method:t,url:e}))}}),o.forEach(["post","put","patch"],function(t){c.prototype[t]=function(e,n,r){return this.request(o.merge(r||{},{method:t,url:e,data:n}))}}),t.exports=c},function(t,e){var n,r,o=t.exports={};function u(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function c(t){if(n===setTimeout)return setTimeout(t,0);if((n===u||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:u}catch(t){n=u}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(t){r=i}}();var a,f=[],s=!1,l=-1;function p(){s&&a&&(s=!1,a.length?f=a.concat(f):l=-1,f.length&&y())}function y(){if(!s){var t=c(p);s=!0;for(var e=f.length;e;){for(a=f,f=[];++l<e;)a&&a[l].run();l=-1,e=f.length}a=null,s=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function h(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];f.push(new d(t,e)),1!==f.length||s||c(y)},d.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=h,o.addListener=h,o.once=h,o.off=h,o.removeListener=h,o.removeAllListeners=h,o.emit=h,o.prependListener=h,o.prependOnceListener=h,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e){r.forEach(t,function(n,r){r!==e&&r.toUpperCase()===e.toUpperCase()&&(t[e]=n,delete t[r])})}},function(t,e,n){"use strict";var r=n(6);t.exports=function(t,e,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?e(r("Request failed with status code "+n.status,n.config,null,n.request,n)):t(n)}},function(t,e,n){"use strict";t.exports=function(t,e,n,r,o){return t.config=e,n&&(t.code=n),t.request=r,t.response=o,t}},function(t,e,n){"use strict";var r=n(2);function o(t){return encodeURIComponent(t).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}t.exports=function(t,e,n){if(!e)return t;var u;if(n)u=n(e);else if(r.isURLSearchParams(e))u=e.toString();else{var i=[];r.forEach(e,function(t,e){null!=t&&(r.isArray(t)?e+="[]":t=[t],r.forEach(t,function(t){r.isDate(t)?t=t.toISOString():r.isObject(t)&&(t=JSON.stringify(t)),i.push(o(e)+"="+o(t))}))}),u=i.join("&")}return u&&(t+=(-1===t.indexOf("?")?"?":"&")+u),t}},function(t,e,n){"use strict";var r=n(2),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];t.exports=function(t){var e,n,u,i={};return t?(r.forEach(t.split("\n"),function(t){if(u=t.indexOf(":"),e=r.trim(t.substr(0,u)).toLowerCase(),n=r.trim(t.substr(u+1)),e){if(i[e]&&o.indexOf(e)>=0)return;i[e]="set-cookie"===e?(i[e]?i[e]:[]).concat([n]):i[e]?i[e]+", "+n:n}}),i):i}},function(t,e,n){"use strict";var r=n(2);t.exports=r.isStandardBrowserEnv()?function(){var t,e=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(t){var r=t;return e&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return t=o(window.location.href),function(e){var n=r.isString(e)?o(e):e;return n.protocol===t.protocol&&n.host===t.host}}():function(){return!0}},function(t,e,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",t.exports=function(t){for(var e,n,u=String(t),i="",c=0,a=r;u.charAt(0|c)||(a="=",c%1);i+=a.charAt(63&e>>8-c%1*8)){if((n=u.charCodeAt(c+=.75))>255)throw new o;e=e<<8|n}return i}},function(t,e,n){"use strict";var r=n(2);t.exports=r.isStandardBrowserEnv()?{write:function(t,e,n,o,u,i){var c=[];c.push(t+"="+encodeURIComponent(e)),r.isNumber(n)&&c.push("expires="+new Date(n).toGMTString()),r.isString(o)&&c.push("path="+o),r.isString(u)&&c.push("domain="+u),!0===i&&c.push("secure"),document.cookie=c.join("; ")},read:function(t){var e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(t,e,n){"use strict";var r=n(2);function o(){this.handlers=[]}o.prototype.use=function(t,e){return this.handlers.push({fulfilled:t,rejected:e}),this.handlers.length-1},o.prototype.eject=function(t){this.handlers[t]&&(this.handlers[t]=null)},o.prototype.forEach=function(t){r.forEach(this.handlers,function(e){null!==e&&t(e)})},t.exports=o},function(t,e,n){"use strict";var r=n(2),o=n(26),u=n(7),i=n(3),c=n(27),a=n(28);function f(t){t.cancelToken&&t.cancelToken.throwIfRequested()}t.exports=function(t){return f(t),t.baseURL&&!c(t.url)&&(t.url=a(t.baseURL,t.url)),t.headers=t.headers||{},t.data=o(t.data,t.headers,t.transformRequest),t.headers=r.merge(t.headers.common||{},t.headers[t.method]||{},t.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(e){delete t.headers[e]}),(t.adapter||i.adapter)(t).then(function(e){return f(t),e.data=o(e.data,e.headers,t.transformResponse),e},function(e){return u(e)||(f(t),e&&e.response&&(e.response.data=o(e.response.data,e.response.headers,t.transformResponse))),Promise.reject(e)})}},function(t,e,n){"use strict";var r=n(2);t.exports=function(t,e,n){return r.forEach(n,function(n){t=n(t,e)}),t}},function(t,e,n){"use strict";t.exports=function(t){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(t)}},function(t,e,n){"use strict";t.exports=function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}},function(t,e,n){"use strict";var r=n(8);function o(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");var e;this.promise=new Promise(function(t){e=t});var n=this;t(function(t){n.reason||(n.reason=new r(t),e(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var t;return{token:new o(function(e){t=e}),cancel:t}},t.exports=o},function(t,e,n){"use strict";t.exports=function(t){return function(e){return t.apply(null,e)}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t;return new Promise(function(t,e){r.default.get(o,{options:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getVersions",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t+"/versions";return new Promise(function(t,e){r.default.get(o,{options:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"restoreVersion",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t+"/versions/"+n;return new Promise(function(t,e){r.default.put(o).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOneBySlug",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries?slug="+t;return new Promise(function(t,e){r.default.get(o,{options:n}).then(function(e){var n=e.data;n&&(n.data=n.data[0]),t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t;return new Promise(function(t,e){r.default.put(o,n).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries";return new Promise(function(e,o){r.default.post(n,t).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t;return new Promise(function(t,e){r.default.delete(n).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getEntrySchema",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/entries/"+t+"/schema";return new Promise(function(t,e){r.default.get(n).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/content-types";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/content-types/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/content-types/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/content-types";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/content-types/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var l=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,f(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o.default),n=e,(u=[{key:"login",value:function(t,e){return new Promise(function(n,o){r.default.post("/login",{username:t,password:e}).then(function(t){n(t.data)}).catch(function(t){return o(t)})})}},{key:"refresh",value:function(t){return new Promise(function(e,n){r.default.post("/jwt/refresh",{refresh_token:t}).then(function(t){e(t.data)}).catch(function(t){return n(t)})})}}])&&c(n.prototype,u),i&&c(n,i),e}();e.default=l,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function s(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var p=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var u=arguments.length,c=new Array(u),f=0;f<u;f++)c[f]=arguments[f];return r=this,n=!(o=(t=a(e)).call.apply(t,[this].concat(c)))||"object"!==i(o)&&"function"!=typeof o?s(r):o,l(s(s(n)),"_entity","spaces"),n}var n,u,p;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&f(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var e=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){l(t,e,n[e])})}return t}({},{page:1,limit:100},t);return new Promise(function(t,n){r.default.get("/spaces",{params:e}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"getOne",value:function(t){var e="/spaces/"+t;return new Promise(function(t,n){r.default.get(e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"update",value:function(t,e){var n="/spaces/"+t;return new Promise(function(t,o){r.default.put(n,e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}},{key:"create",value:function(t){return new Promise(function(e,n){r.default.post("/spaces",t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return n(t)})})}},{key:"delete",value:function(t,e){var n="/spaces/"+t;return new Promise(function(t,o){r.default.delete(n,{data:{name:e}}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}}])&&c(n.prototype,u),p&&c(n,p),e}();e.default=p,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,s(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var e=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t);return new Promise(function(t,n){r.default.get("/organizations",{params:e}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"getOne",value:function(t){var e="/organizations/"+t;return new Promise(function(t,n){r.default.get(e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"update",value:function(t,e){var n="/organizations/"+t;return new Promise(function(t,o){r.default.put(n,e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}},{key:"create",value:function(t){return new Promise(function(e,n){r.default.post("/organizations",t).then(function(t){var n=t.data;e(n)}).catch(function(t){return n(t)})})}},{key:"delete",value:function(t,e){var n="/organizations/"+t;return new Promise(function(t,o){r.default.delete(n,{data:{name:e}}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=p,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/compound-fields";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/compound-fields/"+t;return new Promise(function(t,e){r.default.get(n).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/compound-fields/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/compound-fields";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/compound-fields/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getVersions",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t+"/versions";return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"restoreVersion",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t+"/versions/"+n;return new Promise(function(t,e){r.default.put(o).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getSubmits",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t+"/submits";return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"setSubmits",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/forms/"+t+"/submits";return new Promise(function(t,e){r.default.post(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/form-types";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/form-types/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/form-types/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/form-types";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/form-types/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getEvents",value:function(){return new Promise(function(t,e){r.default.get("/hooks/events").then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/hooks";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/hooks/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/hooks/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/hooks";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/hooks/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t,e,n){return(s="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=l(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function p(t,e){return(p=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var y=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,l(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&p(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/configs";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/configs/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/configs/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/configs";return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+s(l(e.prototype),"currentSpace",this)+"/configs/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=f(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var u=arguments.length,c=new Array(u),a=0;a<u;a++)c[a]=arguments[a];return r=this,n=!(o=(t=f(e)).call.apply(t,[this].concat(c)))||"object"!==i(o)&&"function"!=typeof o?l(r):o,p(l(l(n)),"_entity","tags"),n}var n,u,y;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){p(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity;return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity;return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&c(n.prototype,u),y&&c(n,y),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t,e,n){return(a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,e,n){var r=function(t,e){for(;!Object.prototype.hasOwnProperty.call(t,e)&&null!==(t=f(t)););return t}(t,e);if(r){var o=Object.getOwnPropertyDescriptor(r,e);return o.get?o.get.call(n):o.value}})(t,e,n||t)}function f(t){return(f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function s(t,e){return(s=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var y=function(t){function e(){var t,n,r,o;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);for(var u=arguments.length,c=new Array(u),a=0;a<u;a++)c[a]=arguments[a];return r=this,n=!(o=(t=f(e)).call.apply(t,[this].concat(c)))||"object"!==i(o)&&"function"!=typeof o?l(r):o,p(l(l(n)),"_entity","assets"),n}var n,u,y;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&s(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){p(t,e,n[e])})}return t}({},{page:1,limit:100},t),o="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity;return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,n){var o="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity;return new Promise(function(e,o){r.default.post(n,t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t){var n="/spaces/"+a(f(e.prototype),"currentSpace",this)+"/"+this._entity+"/"+t;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&c(n.prototype,u),y&&c(n,y),e}();e.default=y,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,s(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var e=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t);return new Promise(function(t,n){r.default.get("/users",{params:e}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"getOne",value:function(t){var e="/users/"+t;return new Promise(function(t,n){r.default.get(e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"update",value:function(t,e){var n="/users/"+t;return new Promise(function(t,o){r.default.put(n,e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}},{key:"create",value:function(t){return new Promise(function(e,n){r.default.post("/users",t,{}).then(function(t){var n=t.data;e(n)}).catch(function(t){return n(t)})})}},{key:"delete",value:function(t){var e="/users/"+t;return new Promise(function(t,n){r.default.delete(e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=p,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,s(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t,e){var n=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},e),o="/users/"+t+"/tokens";return new Promise(function(t,e){r.default.get(o,{params:n}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"getOne",value:function(t,e){var n="/users/"+t+"/tokens/"+e;return new Promise(function(t,e){r.default.get(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"update",value:function(t,e,n){var o="/users/"+t+"/tokens/"+e;return new Promise(function(t,e){r.default.put(o,n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}},{key:"create",value:function(t,e){var n="/users/"+t+"/tokens";return new Promise(function(t,o){r.default.post(n,e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return o(t)})})}},{key:"delete",value:function(t,e){var n="/users/"+t+"/tokens/"+e;return new Promise(function(t,e){r.default.delete(n,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return e(t)})})}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=p,t.exports=e.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var r=u(n(0)),o=u(n(1));function u(t){return t&&t.__esModule?t:{default:t}}function i(t){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function c(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function f(t,e){return!e||"object"!==i(e)&&"function"!=typeof e?function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(t):e}function s(t){return(s=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}var p=function(t){function e(){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),f(this,s(e).apply(this,arguments))}var n,u,i;return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,o.default),n=e,(u=[{key:"getAll",value:function(t){var e=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),r.forEach(function(e){c(t,e,n[e])})}return t}({},{page:1,limit:100},t);return new Promise(function(t,n){r.default.get("/groups",{params:e}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"getOne",value:function(t){var e="/groups/"+t;return new Promise(function(t,n){r.default.get(e,{}).then(function(e){var n=e.data;t(n)}).catch(function(t){return n(t)})})}},{key:"update",value:function(t,e){throw new Error("Method not available")}},{key:"create",value:function(t){throw new Error("Method not available")}},{key:"delete",value:function(t){throw new Error("Method not available")}}])&&a(n.prototype,u),i&&a(n,i),e}();e.default=p,t.exports=e.default}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,